#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'calculadora_types.rb'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def producto(num1, num2)
      send_producto(num1, num2)
      return recv_producto()
    end

    def send_producto(num1, num2)
      send_message('producto', Producto_args, :num1 => num1, :num2 => num2)
    end

    def recv_producto()
      result = receive_message(Producto_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto failed: unknown result')
    end

    def cociente(num1, num2)
      send_cociente(num1, num2)
      return recv_cociente()
    end

    def send_cociente(num1, num2)
      send_message('cociente', Cociente_args, :num1 => num1, :num2 => num2)
    end

    def recv_cociente()
      result = receive_message(Cociente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cociente failed: unknown result')
    end

    def ecuacionGradoDos(a, b, c)
      send_ecuacionGradoDos(a, b, c)
      return recv_ecuacionGradoDos()
    end

    def send_ecuacionGradoDos(a, b, c)
      send_message('ecuacionGradoDos', EcuacionGradoDos_args, :a => a, :b => b, :c => c)
    end

    def recv_ecuacionGradoDos()
      result = receive_message(EcuacionGradoDos_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ecuacionGradoDos failed: unknown result')
    end

    def sumaAcumulada(acumulado)
      send_sumaAcumulada(acumulado)
      return recv_sumaAcumulada()
    end

    def send_sumaAcumulada(acumulado)
      send_message('sumaAcumulada', SumaAcumulada_args, :acumulado => acumulado)
    end

    def recv_sumaAcumulada()
      result = receive_message(SumaAcumulada_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumaAcumulada failed: unknown result')
    end

    def restaAcumulada(acumulado)
      send_restaAcumulada(acumulado)
      return recv_restaAcumulada()
    end

    def send_restaAcumulada(acumulado)
      send_message('restaAcumulada', RestaAcumulada_args, :acumulado => acumulado)
    end

    def recv_restaAcumulada()
      result = receive_message(RestaAcumulada_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restaAcumulada failed: unknown result')
    end

    def productoAcumulado(acumulado)
      send_productoAcumulado(acumulado)
      return recv_productoAcumulado()
    end

    def send_productoAcumulado(acumulado)
      send_message('productoAcumulado', ProductoAcumulado_args, :acumulado => acumulado)
    end

    def recv_productoAcumulado()
      result = receive_message(ProductoAcumulado_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productoAcumulado failed: unknown result')
    end

    def sumaVectores(vector1, vector2)
      send_sumaVectores(vector1, vector2)
      return recv_sumaVectores()
    end

    def send_sumaVectores(vector1, vector2)
      send_message('sumaVectores', SumaVectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_sumaVectores()
      result = receive_message(SumaVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumaVectores failed: unknown result')
    end

    def restaVectores(vector1, vector2)
      send_restaVectores(vector1, vector2)
      return recv_restaVectores()
    end

    def send_restaVectores(vector1, vector2)
      send_message('restaVectores', RestaVectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_restaVectores()
      result = receive_message(RestaVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restaVectores failed: unknown result')
    end

    def productoVectores(vector1, vector2)
      send_productoVectores(vector1, vector2)
      return recv_productoVectores()
    end

    def send_productoVectores(vector1, vector2)
      send_message('productoVectores', ProductoVectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_productoVectores()
      result = receive_message(ProductoVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productoVectores failed: unknown result')
    end

    def cocienteVectores(vector1, vector2)
      send_cocienteVectores(vector1, vector2)
      return recv_cocienteVectores()
    end

    def send_cocienteVectores(vector1, vector2)
      send_message('cocienteVectores', CocienteVectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_cocienteVectores()
      result = receive_message(CocienteVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cocienteVectores failed: unknown result')
    end

    def sumaMatrices(matriz1, matriz2)
      send_sumaMatrices(matriz1, matriz2)
      return recv_sumaMatrices()
    end

    def send_sumaMatrices(matriz1, matriz2)
      send_message('sumaMatrices', SumaMatrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_sumaMatrices()
      result = receive_message(SumaMatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumaMatrices failed: unknown result')
    end

    def restaMatrices(matriz1, matriz2)
      send_restaMatrices(matriz1, matriz2)
      return recv_restaMatrices()
    end

    def send_restaMatrices(matriz1, matriz2)
      send_message('restaMatrices', RestaMatrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_restaMatrices()
      result = receive_message(RestaMatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restaMatrices failed: unknown result')
    end

    def productoMatrices(matriz1, matriz2)
      send_productoMatrices(matriz1, matriz2)
      return recv_productoMatrices()
    end

    def send_productoMatrices(matriz1, matriz2)
      send_message('productoMatrices', ProductoMatrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_productoMatrices()
      result = receive_message(ProductoMatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productoMatrices failed: unknown result')
    end

    def cocienteMatrices(matriz1, matriz2)
      send_cocienteMatrices(matriz1, matriz2)
      return recv_cocienteMatrices()
    end

    def send_cocienteMatrices(matriz1, matriz2)
      send_message('cocienteMatrices', CocienteMatrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_cocienteMatrices()
      result = receive_message(CocienteMatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cocienteMatrices failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_producto(seqid, iprot, oprot)
      args = read_args(iprot, Producto_args)
      result = Producto_result.new()
      result.success = @handler.producto(args.num1, args.num2)
      write_result(result, oprot, 'producto', seqid)
    end

    def process_cociente(seqid, iprot, oprot)
      args = read_args(iprot, Cociente_args)
      result = Cociente_result.new()
      result.success = @handler.cociente(args.num1, args.num2)
      write_result(result, oprot, 'cociente', seqid)
    end

    def process_ecuacionGradoDos(seqid, iprot, oprot)
      args = read_args(iprot, EcuacionGradoDos_args)
      result = EcuacionGradoDos_result.new()
      result.success = @handler.ecuacionGradoDos(args.a, args.b, args.c)
      write_result(result, oprot, 'ecuacionGradoDos', seqid)
    end

    def process_sumaAcumulada(seqid, iprot, oprot)
      args = read_args(iprot, SumaAcumulada_args)
      result = SumaAcumulada_result.new()
      result.success = @handler.sumaAcumulada(args.acumulado)
      write_result(result, oprot, 'sumaAcumulada', seqid)
    end

    def process_restaAcumulada(seqid, iprot, oprot)
      args = read_args(iprot, RestaAcumulada_args)
      result = RestaAcumulada_result.new()
      result.success = @handler.restaAcumulada(args.acumulado)
      write_result(result, oprot, 'restaAcumulada', seqid)
    end

    def process_productoAcumulado(seqid, iprot, oprot)
      args = read_args(iprot, ProductoAcumulado_args)
      result = ProductoAcumulado_result.new()
      result.success = @handler.productoAcumulado(args.acumulado)
      write_result(result, oprot, 'productoAcumulado', seqid)
    end

    def process_sumaVectores(seqid, iprot, oprot)
      args = read_args(iprot, SumaVectores_args)
      result = SumaVectores_result.new()
      result.success = @handler.sumaVectores(args.vector1, args.vector2)
      write_result(result, oprot, 'sumaVectores', seqid)
    end

    def process_restaVectores(seqid, iprot, oprot)
      args = read_args(iprot, RestaVectores_args)
      result = RestaVectores_result.new()
      result.success = @handler.restaVectores(args.vector1, args.vector2)
      write_result(result, oprot, 'restaVectores', seqid)
    end

    def process_productoVectores(seqid, iprot, oprot)
      args = read_args(iprot, ProductoVectores_args)
      result = ProductoVectores_result.new()
      result.success = @handler.productoVectores(args.vector1, args.vector2)
      write_result(result, oprot, 'productoVectores', seqid)
    end

    def process_cocienteVectores(seqid, iprot, oprot)
      args = read_args(iprot, CocienteVectores_args)
      result = CocienteVectores_result.new()
      result.success = @handler.cocienteVectores(args.vector1, args.vector2)
      write_result(result, oprot, 'cocienteVectores', seqid)
    end

    def process_sumaMatrices(seqid, iprot, oprot)
      args = read_args(iprot, SumaMatrices_args)
      result = SumaMatrices_result.new()
      result.success = @handler.sumaMatrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'sumaMatrices', seqid)
    end

    def process_restaMatrices(seqid, iprot, oprot)
      args = read_args(iprot, RestaMatrices_args)
      result = RestaMatrices_result.new()
      result.success = @handler.restaMatrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'restaMatrices', seqid)
    end

    def process_productoMatrices(seqid, iprot, oprot)
      args = read_args(iprot, ProductoMatrices_args)
      result = ProductoMatrices_result.new()
      result.success = @handler.productoMatrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'productoMatrices', seqid)
    end

    def process_cocienteMatrices(seqid, iprot, oprot)
      args = read_args(iprot, CocienteMatrices_args)
      result = CocienteMatrices_result.new()
      result.success = @handler.cocienteMatrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'cocienteMatrices', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cociente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cociente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EcuacionGradoDos_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    A = 1
    B = 2
    C = 3

    FIELDS = {
      A => {:type => ::Thrift::Types::I32, :name => 'a'},
      B => {:type => ::Thrift::Types::I32, :name => 'b'},
      C => {:type => ::Thrift::Types::I32, :name => 'c'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EcuacionGradoDos_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Funcion_cuadratica}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaAcumulada_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACUMULADO = 1

    FIELDS = {
      ACUMULADO => {:type => ::Thrift::Types::LIST, :name => 'acumulado', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaAcumulada_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaAcumulada_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACUMULADO = 1

    FIELDS = {
      ACUMULADO => {:type => ::Thrift::Types::LIST, :name => 'acumulado', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaAcumulada_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoAcumulado_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACUMULADO = 1

    FIELDS = {
      ACUMULADO => {:type => ::Thrift::Types::LIST, :name => 'acumulado', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoAcumulado_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::I32}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::I32}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::I32}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CocienteVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::I32}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CocienteVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProductoMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CocienteMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CocienteMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

