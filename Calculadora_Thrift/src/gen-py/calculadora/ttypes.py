#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class funcion_cuadratica(object):
    """
    Attributes:
     - a
     - b
     - c
     - x1
     - x2

    """


    def __init__(self, a=None, b=None, c=None, x1=None, x2=None,):
        self.a = a
        self.b = b
        self.c = c
        self.x1 = x1
        self.x2 = x2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.a = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.b = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.c = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.x1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.x2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('funcion_cuadratica')
        if self.a is not None:
            oprot.writeFieldBegin('a', TType.I32, 1)
            oprot.writeI32(self.a)
            oprot.writeFieldEnd()
        if self.b is not None:
            oprot.writeFieldBegin('b', TType.I32, 2)
            oprot.writeI32(self.b)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.I32, 3)
            oprot.writeI32(self.c)
            oprot.writeFieldEnd()
        if self.x1 is not None:
            oprot.writeFieldBegin('x1', TType.DOUBLE, 4)
            oprot.writeDouble(self.x1)
            oprot.writeFieldEnd()
        if self.x2 is not None:
            oprot.writeFieldBegin('x2', TType.DOUBLE, 5)
            oprot.writeDouble(self.x2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.a is None:
            raise TProtocolException(message='Required field a is unset!')
        if self.b is None:
            raise TProtocolException(message='Required field b is unset!')
        if self.c is None:
            raise TProtocolException(message='Required field c is unset!')
        if self.x1 is None:
            raise TProtocolException(message='Required field x1 is unset!')
        if self.x2 is None:
            raise TProtocolException(message='Required field x2 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(funcion_cuadratica)
funcion_cuadratica.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'a', None, None, ),  # 1
    (2, TType.I32, 'b', None, None, ),  # 2
    (3, TType.I32, 'c', None, None, ),  # 3
    (4, TType.DOUBLE, 'x1', None, None, ),  # 4
    (5, TType.DOUBLE, 'x2', None, None, ),  # 5
)
fix_spec(all_structs)
del all_structs
