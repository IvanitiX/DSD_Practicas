/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library calculadora.src.calculadora;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:calculadora/calculadora.dart';


abstract class Calculadora {

  Future ping();

  Future<int> suma(int num1, int num2);

  Future<int> resta(int num1, int num2);

  Future<int> producto(int num1, int num2);

  Future<double> cociente(int num1, int num2);
}

class CalculadoraClient implements Calculadora {

  CalculadoraClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future ping() async {
    oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, nextSeqid()));
    ping_args args = new ping_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    ping_result result = new ping_result();
    result.read(iprot);
    iprot.readMessageEnd();
    return;
  }

  Future<int> suma(int num1, int num2) async {
    oprot.writeMessageBegin(new TMessage("suma", TMessageType.CALL, nextSeqid()));
    suma_args args = new suma_args();
    args.num1 = num1;
    args.num2 = num2;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    suma_result result = new suma_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "suma failed: unknown result");
  }

  Future<int> resta(int num1, int num2) async {
    oprot.writeMessageBegin(new TMessage("resta", TMessageType.CALL, nextSeqid()));
    resta_args args = new resta_args();
    args.num1 = num1;
    args.num2 = num2;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    resta_result result = new resta_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "resta failed: unknown result");
  }

  Future<int> producto(int num1, int num2) async {
    oprot.writeMessageBegin(new TMessage("producto", TMessageType.CALL, nextSeqid()));
    producto_args args = new producto_args();
    args.num1 = num1;
    args.num2 = num2;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    producto_result result = new producto_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "producto failed: unknown result");
  }

  Future<double> cociente(int num1, int num2) async {
    oprot.writeMessageBegin(new TMessage("cociente", TMessageType.CALL, nextSeqid()));
    cociente_args args = new cociente_args();
    args.num1 = num1;
    args.num2 = num2;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    cociente_result result = new cociente_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "cociente failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class CalculadoraProcessor implements TProcessor {
  CalculadoraProcessor(Calculadora iface) {
    iface_ = iface;
    PROCESS_MAP["ping"] = ping;
    PROCESS_MAP["suma"] = suma;
    PROCESS_MAP["resta"] = resta;
    PROCESS_MAP["producto"] = producto;
    PROCESS_MAP["cociente"] = cociente;
  }

  Calculadora iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  ping(int seqid, TProtocol iprot, TProtocol oprot) {
    ping_args args = new ping_args();
    args.read(iprot);
    iprot.readMessageEnd();
    ping_result result = new ping_result();
    iface_.ping();
    oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  suma(int seqid, TProtocol iprot, TProtocol oprot) async {
    suma_args args = new suma_args();
    args.read(iprot);
    iprot.readMessageEnd();
    suma_result result = new suma_result();
    result.success = await iface_.suma(args.num1, args.num2);
    oprot.writeMessageBegin(new TMessage("suma", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  resta(int seqid, TProtocol iprot, TProtocol oprot) async {
    resta_args args = new resta_args();
    args.read(iprot);
    iprot.readMessageEnd();
    resta_result result = new resta_result();
    result.success = await iface_.resta(args.num1, args.num2);
    oprot.writeMessageBegin(new TMessage("resta", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  producto(int seqid, TProtocol iprot, TProtocol oprot) async {
    producto_args args = new producto_args();
    args.read(iprot);
    iprot.readMessageEnd();
    producto_result result = new producto_result();
    result.success = await iface_.producto(args.num1, args.num2);
    oprot.writeMessageBegin(new TMessage("producto", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  cociente(int seqid, TProtocol iprot, TProtocol oprot) async {
    cociente_args args = new cociente_args();
    args.read(iprot);
    iprot.readMessageEnd();
    cociente_result result = new cociente_result();
    result.success = await iface_.cociente(args.num1, args.num2);
    oprot.writeMessageBegin(new TMessage("cociente", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class ping_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ping_args");



  ping_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ping_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class ping_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ping_result");



  ping_result() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);


    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ping_result(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class suma_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("suma_args");
  static final TField _NUM1_FIELD_DESC = new TField("num1", TType.I32, 1);
  static final TField _NUM2_FIELD_DESC = new TField("num2", TType.I32, 2);

  int _num1 = 0;
  static const int NUM1 = 1;
  int _num2 = 0;
  static const int NUM2 = 2;

  bool __isset_num1 = false;
  bool __isset_num2 = false;

  suma_args() {
  }

  // num1
  int get num1 => this._num1;

  set num1(int num1) {
    this._num1 = num1;
    this.__isset_num1 = true;
  }

  bool isSetNum1() => this.__isset_num1;

  unsetNum1() {
    this.__isset_num1 = false;
  }

  // num2
  int get num2 => this._num2;

  set num2(int num2) {
    this._num2 = num2;
    this.__isset_num2 = true;
  }

  bool isSetNum2() => this.__isset_num2;

  unsetNum2() {
    this.__isset_num2 = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return this.num1;
      case NUM2:
        return this.num2;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          this.num1 = value;
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          this.num2 = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUM1:
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            this.__isset_num1 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM2:
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            this.__isset_num2 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("suma_args(");

    ret.write("num1:");
    ret.write(this.num1);

    ret.write(", ");
    ret.write("num2:");
    ret.write(this.num2);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class suma_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("suma_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I32, 0);

  int _success = 0;
  static const int SUCCESS = 0;

  bool __isset_success = false;

  suma_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I32) {
            this.success = iprot.readI32();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("suma_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class resta_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("resta_args");
  static final TField _NUM1_FIELD_DESC = new TField("num1", TType.I32, 1);
  static final TField _NUM2_FIELD_DESC = new TField("num2", TType.I32, 2);

  int _num1 = 0;
  static const int NUM1 = 1;
  int _num2 = 0;
  static const int NUM2 = 2;

  bool __isset_num1 = false;
  bool __isset_num2 = false;

  resta_args() {
  }

  // num1
  int get num1 => this._num1;

  set num1(int num1) {
    this._num1 = num1;
    this.__isset_num1 = true;
  }

  bool isSetNum1() => this.__isset_num1;

  unsetNum1() {
    this.__isset_num1 = false;
  }

  // num2
  int get num2 => this._num2;

  set num2(int num2) {
    this._num2 = num2;
    this.__isset_num2 = true;
  }

  bool isSetNum2() => this.__isset_num2;

  unsetNum2() {
    this.__isset_num2 = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return this.num1;
      case NUM2:
        return this.num2;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          this.num1 = value;
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          this.num2 = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUM1:
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            this.__isset_num1 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM2:
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            this.__isset_num2 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("resta_args(");

    ret.write("num1:");
    ret.write(this.num1);

    ret.write(", ");
    ret.write("num2:");
    ret.write(this.num2);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class resta_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("resta_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I32, 0);

  int _success = 0;
  static const int SUCCESS = 0;

  bool __isset_success = false;

  resta_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I32) {
            this.success = iprot.readI32();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("resta_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class producto_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("producto_args");
  static final TField _NUM1_FIELD_DESC = new TField("num1", TType.I32, 1);
  static final TField _NUM2_FIELD_DESC = new TField("num2", TType.I32, 2);

  int _num1 = 0;
  static const int NUM1 = 1;
  int _num2 = 0;
  static const int NUM2 = 2;

  bool __isset_num1 = false;
  bool __isset_num2 = false;

  producto_args() {
  }

  // num1
  int get num1 => this._num1;

  set num1(int num1) {
    this._num1 = num1;
    this.__isset_num1 = true;
  }

  bool isSetNum1() => this.__isset_num1;

  unsetNum1() {
    this.__isset_num1 = false;
  }

  // num2
  int get num2 => this._num2;

  set num2(int num2) {
    this._num2 = num2;
    this.__isset_num2 = true;
  }

  bool isSetNum2() => this.__isset_num2;

  unsetNum2() {
    this.__isset_num2 = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return this.num1;
      case NUM2:
        return this.num2;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          this.num1 = value;
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          this.num2 = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUM1:
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            this.__isset_num1 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM2:
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            this.__isset_num2 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("producto_args(");

    ret.write("num1:");
    ret.write(this.num1);

    ret.write(", ");
    ret.write("num2:");
    ret.write(this.num2);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class producto_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("producto_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I32, 0);

  int _success = 0;
  static const int SUCCESS = 0;

  bool __isset_success = false;

  producto_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I32) {
            this.success = iprot.readI32();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("producto_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class cociente_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("cociente_args");
  static final TField _NUM1_FIELD_DESC = new TField("num1", TType.I32, 1);
  static final TField _NUM2_FIELD_DESC = new TField("num2", TType.I32, 2);

  int _num1 = 0;
  static const int NUM1 = 1;
  int _num2 = 0;
  static const int NUM2 = 2;

  bool __isset_num1 = false;
  bool __isset_num2 = false;

  cociente_args() {
  }

  // num1
  int get num1 => this._num1;

  set num1(int num1) {
    this._num1 = num1;
    this.__isset_num1 = true;
  }

  bool isSetNum1() => this.__isset_num1;

  unsetNum1() {
    this.__isset_num1 = false;
  }

  // num2
  int get num2 => this._num2;

  set num2(int num2) {
    this._num2 = num2;
    this.__isset_num2 = true;
  }

  bool isSetNum2() => this.__isset_num2;

  unsetNum2() {
    this.__isset_num2 = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return this.num1;
      case NUM2:
        return this.num2;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          this.num1 = value;
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          this.num2 = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUM1:
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            this.__isset_num1 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM2:
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            this.__isset_num2 = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("cociente_args(");

    ret.write("num1:");
    ret.write(this.num1);

    ret.write(", ");
    ret.write("num2:");
    ret.write(this.num2);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class cociente_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("cociente_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.DOUBLE, 0);

  double _success = 0.0;
  static const int SUCCESS = 0;

  bool __isset_success = false;

  cociente_result() {
  }

  // success
  double get success => this._success;

  set success(double success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.DOUBLE) {
            this.success = iprot.readDouble();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeDouble(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("cociente_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

