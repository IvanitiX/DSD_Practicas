/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int secuencia_len;
	double *secuencia_val;
} secuencia;

typedef struct {
	u_int matriz_len;
	secuencia *matriz_val;
} matriz;

struct funcion_cuadratica {
	int a;
	int b;
	int c;
	double valor_1;
	double valor_2;
};
typedef struct funcion_cuadratica funcion_cuadratica;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct producto_1_argument {
	double arg1;
	double arg2;
};
typedef struct producto_1_argument producto_1_argument;

struct cociente_1_argument {
	double arg1;
	double arg2;
};
typedef struct cociente_1_argument cociente_1_argument;

struct ecuaciongradodos_1_argument {
	int arg1;
	int arg2;
	int arg3;
};
typedef struct ecuaciongradodos_1_argument ecuaciongradodos_1_argument;

struct sumavectores_1_argument {
	secuencia arg1;
	secuencia arg2;
};
typedef struct sumavectores_1_argument sumavectores_1_argument;

struct restavectores_1_argument {
	secuencia arg1;
	secuencia arg2;
};
typedef struct restavectores_1_argument restavectores_1_argument;

struct productovectores_1_argument {
	secuencia arg1;
	secuencia arg2;
};
typedef struct productovectores_1_argument productovectores_1_argument;

struct cocientevectores_1_argument {
	secuencia arg1;
	secuencia arg2;
};
typedef struct cocientevectores_1_argument cocientevectores_1_argument;

struct sumamatrices_1_argument {
	matriz arg1;
	matriz arg2;
};
typedef struct sumamatrices_1_argument sumamatrices_1_argument;

struct restamatrices_1_argument {
	matriz arg1;
	matriz arg2;
};
typedef struct restamatrices_1_argument restamatrices_1_argument;

struct productomatrices_1_argument {
	matriz arg1;
	matriz arg2;
};
typedef struct productomatrices_1_argument productomatrices_1_argument;

#define RPC_CALC 0x20000001
#define DIRVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  double * suma_1(double , double , CLIENT *);
extern  double * suma_1_svc(double , double , struct svc_req *);
#define resta 2
extern  double * resta_1(double , double , CLIENT *);
extern  double * resta_1_svc(double , double , struct svc_req *);
#define producto 3
extern  double * producto_1(double , double , CLIENT *);
extern  double * producto_1_svc(double , double , struct svc_req *);
#define cociente 4
extern  double * cociente_1(double , double , CLIENT *);
extern  double * cociente_1_svc(double , double , struct svc_req *);
#define ecuacionGradoDos 5
extern  funcion_cuadratica * ecuaciongradodos_1(int , int , int , CLIENT *);
extern  funcion_cuadratica * ecuaciongradodos_1_svc(int , int , int , struct svc_req *);
#define sumaAcumuladaVector 6
extern  double * sumaacumuladavector_1(secuencia , CLIENT *);
extern  double * sumaacumuladavector_1_svc(secuencia , struct svc_req *);
#define restaAcumuladaVector 7
extern  double * restaacumuladavector_1(secuencia , CLIENT *);
extern  double * restaacumuladavector_1_svc(secuencia , struct svc_req *);
#define productoAcumuladaVector 8
extern  double * productoacumuladavector_1(secuencia , CLIENT *);
extern  double * productoacumuladavector_1_svc(secuencia , struct svc_req *);
#define sumaVectores 9
extern  secuencia * sumavectores_1(secuencia , secuencia , CLIENT *);
extern  secuencia * sumavectores_1_svc(secuencia , secuencia , struct svc_req *);
#define restaVectores 10
extern  secuencia * restavectores_1(secuencia , secuencia , CLIENT *);
extern  secuencia * restavectores_1_svc(secuencia , secuencia , struct svc_req *);
#define productoVectores 11
extern  secuencia * productovectores_1(secuencia , secuencia , CLIENT *);
extern  secuencia * productovectores_1_svc(secuencia , secuencia , struct svc_req *);
#define cocienteVectores 12
extern  secuencia * cocientevectores_1(secuencia , secuencia , CLIENT *);
extern  secuencia * cocientevectores_1_svc(secuencia , secuencia , struct svc_req *);
#define sumaMatrices 13
extern  matriz * sumamatrices_1(matriz , matriz , CLIENT *);
extern  matriz * sumamatrices_1_svc(matriz , matriz , struct svc_req *);
#define restaMatrices 14
extern  matriz * restamatrices_1(matriz , matriz , CLIENT *);
extern  matriz * restamatrices_1_svc(matriz , matriz , struct svc_req *);
#define productoMatrices 15
extern  matriz * productomatrices_1(matriz , matriz , CLIENT *);
extern  matriz * productomatrices_1_svc(matriz , matriz , struct svc_req *);
#define determinanteMatrices 16
extern  double * determinantematrices_1(matriz , CLIENT *);
extern  double * determinantematrices_1_svc(matriz , struct svc_req *);
extern int rpc_calc_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  double * suma_1();
extern  double * suma_1_svc();
#define resta 2
extern  double * resta_1();
extern  double * resta_1_svc();
#define producto 3
extern  double * producto_1();
extern  double * producto_1_svc();
#define cociente 4
extern  double * cociente_1();
extern  double * cociente_1_svc();
#define ecuacionGradoDos 5
extern  funcion_cuadratica * ecuaciongradodos_1();
extern  funcion_cuadratica * ecuaciongradodos_1_svc();
#define sumaAcumuladaVector 6
extern  double * sumaacumuladavector_1();
extern  double * sumaacumuladavector_1_svc();
#define restaAcumuladaVector 7
extern  double * restaacumuladavector_1();
extern  double * restaacumuladavector_1_svc();
#define productoAcumuladaVector 8
extern  double * productoacumuladavector_1();
extern  double * productoacumuladavector_1_svc();
#define sumaVectores 9
extern  secuencia * sumavectores_1();
extern  secuencia * sumavectores_1_svc();
#define restaVectores 10
extern  secuencia * restavectores_1();
extern  secuencia * restavectores_1_svc();
#define productoVectores 11
extern  secuencia * productovectores_1();
extern  secuencia * productovectores_1_svc();
#define cocienteVectores 12
extern  secuencia * cocientevectores_1();
extern  secuencia * cocientevectores_1_svc();
#define sumaMatrices 13
extern  matriz * sumamatrices_1();
extern  matriz * sumamatrices_1_svc();
#define restaMatrices 14
extern  matriz * restamatrices_1();
extern  matriz * restamatrices_1_svc();
#define productoMatrices 15
extern  matriz * productomatrices_1();
extern  matriz * productomatrices_1_svc();
#define determinanteMatrices 16
extern  double * determinantematrices_1();
extern  double * determinantematrices_1_svc();
extern int rpc_calc_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_secuencia (XDR *, secuencia*);
extern  bool_t xdr_matriz (XDR *, matriz*);
extern  bool_t xdr_funcion_cuadratica (XDR *, funcion_cuadratica*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_producto_1_argument (XDR *, producto_1_argument*);
extern  bool_t xdr_cociente_1_argument (XDR *, cociente_1_argument*);
extern  bool_t xdr_ecuaciongradodos_1_argument (XDR *, ecuaciongradodos_1_argument*);
extern  bool_t xdr_sumavectores_1_argument (XDR *, sumavectores_1_argument*);
extern  bool_t xdr_restavectores_1_argument (XDR *, restavectores_1_argument*);
extern  bool_t xdr_productovectores_1_argument (XDR *, productovectores_1_argument*);
extern  bool_t xdr_cocientevectores_1_argument (XDR *, cocientevectores_1_argument*);
extern  bool_t xdr_sumamatrices_1_argument (XDR *, sumamatrices_1_argument*);
extern  bool_t xdr_restamatrices_1_argument (XDR *, restamatrices_1_argument*);
extern  bool_t xdr_productomatrices_1_argument (XDR *, productomatrices_1_argument*);

#else /* K&R C */
extern bool_t xdr_secuencia ();
extern bool_t xdr_matriz ();
extern bool_t xdr_funcion_cuadratica ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_producto_1_argument ();
extern bool_t xdr_cociente_1_argument ();
extern bool_t xdr_ecuaciongradodos_1_argument ();
extern bool_t xdr_sumavectores_1_argument ();
extern bool_t xdr_restavectores_1_argument ();
extern bool_t xdr_productovectores_1_argument ();
extern bool_t xdr_cocientevectores_1_argument ();
extern bool_t xdr_sumamatrices_1_argument ();
extern bool_t xdr_restamatrices_1_argument ();
extern bool_t xdr_productomatrices_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
